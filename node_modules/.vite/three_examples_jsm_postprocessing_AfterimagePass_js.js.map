{
  "version": 3,
  "sources": ["../three/examples/jsm/shaders/AfterimageShader.js", "../three/examples/jsm/postprocessing/AfterimagePass.js"],
  "sourcesContent": ["/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\n\nconst AfterimageShader = {\n\n\tuniforms: {\n\n\t\t'damp': { value: 0.96 },\n\t\t'tOld': { value: null },\n\t\t'tNew': { value: null }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float damp;\n\n\t\tuniform sampler2D tOld;\n\t\tuniform sampler2D tNew;\n\n\t\tvarying vec2 vUv;\n\n\t\tvec4 when_gt( vec4 x, float y ) {\n\n\t\t\treturn max( sign( x - y ), 0.0 );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 texelOld = texture2D( tOld, vUv );\n\t\t\tvec4 texelNew = texture2D( tNew, vUv );\n\n\t\t\ttexelOld *= damp * when_gt( texelOld, 0.1 );\n\n\t\t\tgl_FragColor = max(texelNew, texelOld);\n\n\t\t}`\n\n};\n\nexport { AfterimageShader };\n", "import {\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nclass AfterimagePass extends Pass {\n\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\tif ( AfterimageShader === undefined ) console.error( 'THREE.AfterimagePass relies on AfterimageShader' );\n\n\t\tthis.shader = AfterimageShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( this.shader.uniforms );\n\n\t\tthis.uniforms[ 'damp' ].value = damp;\n\n\t\tthis.textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\tformat: RGBAFormat\n\n\t\t} );\n\n\t\tthis.textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\tformat: RGBAFormat\n\n\t\t} );\n\n\t\tthis.shaderMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: this.shader.vertexShader,\n\t\t\tfragmentShader: this.shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.compFsQuad = new FullScreenQuad( this.shaderMaterial );\n\n\t\tconst material = new MeshBasicMaterial();\n\t\tthis.copyFsQuad = new FullScreenQuad( material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this.textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this.textureComp );\n\t\tthis.compFsQuad.render( renderer );\n\n\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this.textureOld;\n\t\tthis.textureOld = this.textureComp;\n\t\tthis.textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.textureComp.setSize( width, height );\n\t\tthis.textureOld.setSize( width, height );\n\n\t}\n\n}\n\nexport { AfterimagePass };\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAMA,IAAM,mBAAmB;AAAA,EAExB,UAAU;AAAA,IAET,QAAQ,EAAE,OAAO;AAAA,IACjB,QAAQ,EAAE,OAAO;AAAA,IACjB,QAAQ,EAAE,OAAO;AAAA;AAAA,EAIlB,cAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxB,gBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACf3B,mCAA6B,KAAK;AAAA,EAEjC,YAAa,OAAO,MAAO;AAE1B;AAEA,QAAK,qBAAqB;AAAY,cAAQ,MAAO;AAErD,SAAK,SAAS;AAEd,SAAK,WAAW,cAAc,MAAO,KAAK,OAAO;AAEjD,SAAK,SAAU,QAAS,QAAQ;AAEhC,SAAK,cAAc,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MAEhF,WAAW;AAAA,MACX,WAAW;AAAA,MACX,QAAQ;AAAA;AAIT,SAAK,aAAa,IAAI,kBAAmB,OAAO,YAAY,OAAO,aAAa;AAAA,MAE/E,WAAW;AAAA,MACX,WAAW;AAAA,MACX,QAAQ;AAAA;AAIT,SAAK,iBAAiB,IAAI,eAAgB;AAAA,MAEzC,UAAU,KAAK;AAAA,MACf,cAAc,KAAK,OAAO;AAAA,MAC1B,gBAAgB,KAAK,OAAO;AAAA;AAI7B,SAAK,aAAa,IAAI,eAAgB,KAAK;AAE3C,UAAM,WAAW,IAAI;AACrB,SAAK,aAAa,IAAI,eAAgB;AAAA;AAAA,EAIvC,OAAQ,UAAU,aAAa,YAAwC;AAEtE,SAAK,SAAU,QAAS,QAAQ,KAAK,WAAW;AAChD,SAAK,SAAU,QAAS,QAAQ,WAAW;AAE3C,aAAS,gBAAiB,KAAK;AAC/B,SAAK,WAAW,OAAQ;AAExB,SAAK,WAAW,SAAS,MAAM,KAAK,YAAY;AAEhD,QAAK,KAAK,gBAAiB;AAE1B,eAAS,gBAAiB;AAC1B,WAAK,WAAW,OAAQ;AAAA,WAElB;AAEN,eAAS,gBAAiB;AAE1B,UAAK,KAAK;AAAQ,iBAAS;AAE3B,WAAK,WAAW,OAAQ;AAAA;AAKzB,UAAM,OAAO,KAAK;AAClB,SAAK,aAAa,KAAK;AACvB,SAAK,cAAc;AAAA;AAAA,EAKpB,QAAS,OAAO,QAAS;AAExB,SAAK,YAAY,QAAS,OAAO;AACjC,SAAK,WAAW,QAAS,OAAO;AAAA;AAAA;",
  "names": []
}
